@import "shared/theme.scss";



// Style reset & basics
body { border: none; margin: 0; padding: 0; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; display: flex; flex-direction: column; min-height: 100vh; }
h1, h2, h3, h4, h5, h6 { margin: 30px 0 15px 0; padding: 0; }
h1 + h2, h1 + h3, h1 + h4, h1 + h5, h1 + h6,
h2 + h3, h2 + h4, h2 + h5, h2 + h6,
h3 + h4, h3 + h5, h3 + h6,
h4 + h5, h4 + h6,
h5 + h6 { margin-top: 0; }
p, blockquote, pre, hr, dl, dd, ol, ul, figure { margin: 0; padding: 0; }
p + p { margin-top: .751em; }
blockquote, pre, ul, ol, dl, figure, .highlight { margin-top: 10px; margin-bottom: 10px; }
img { max-width: 100%; vertical-align: middle; }
figure > img { display: block; }
ul, ol { margin-left: 30px; }
li > ul, li > ol { margin-top: 0; margin-bottom: 0; }
sub, sup { font-size: .75em; position: relative; vertical-align: baseline; }
sup { top: -0.55em; }
sub { bottom: -0.3em; }



$tabletWidth: 800px;

@mixin aboveTablet {
	@media all and (min-width: $tabletWidth), print {
		@content;
	}
}
@mixin belowTablet {
	@media not all and (min-width: $tabletWidth) {
		@content;
	}
}

@mixin padding {
	padding: 20px;
	@include belowTablet { padding: 10px; }
}
@mixin hPadding {
	padding-left: 20px; padding-right: 20px;
	@include belowTablet { padding-left: 10px; padding-right: 10px; }
}





// Common light/dark styles
@mixin lightPreset {
	body { background: map-get($bgColor, 'light'); color: map-get($textColor, 'light'); }
	a { color: map-get($linkColor, 'light'); }
	header, footer { background: map-get($menuBackgroundColor, 'light'); }
	nav a { color: map-get($textColor, 'light'); }
	.editor-colors {
		.plainText, .xmlAttributeQuotes { color: map-get($codeHighlightBlack, 'light'); }
		.htmlComment, .comment, .xmlDocComment, .xmlComment { color: map-get($codeHighlightGreen, 'light'); }
		.htmlTagDelimiter, .htmlAttributeValue, .htmlOperator, .keyword, .preprocessorKeyword, .xmlAttributeValue, .xmlDelimiter, .cssPropertyValue, .controlKeyword { color: map-get($codeHighlightBlue, 'light'); }
		.htmlElementName, .string, .stringCSharpVerbatim, .xmlName, .cssSelector { color: map-get($codeHighlightDullRed, 'light'); }
		.htmlAttributeName, .htmlEntity, .xmlAttribute, .cssPropertyName { color: map-get($codeHighlightRed, 'light'); }
		.xmlDocTag, .xmlCDataSection, .powershellOperator, .stringEscape { color: map-get($codeHighlightGray, 'light'); }
		.className { color: map-get($codeHighlightMediumTurquoise, 'light'); }
		.sqlSystemFunction { color: map-get($codeHighlightMagenta, 'light'); }
		.powershellAttribute { color: map-get($codeHighlightPowderBlue, 'light'); }
		.powershellType, .type, .markdownCode, .typeVariable { color: map-get($codeHighlightTeal, 'light'); }
		.powershellVariable { color: map-get($codeHighlightOrangeRed, 'light'); }
		.namespace, .predefined, .pseudoKeyword { color: map-get($codeHighlightNavy, 'light'); }
		.constructor { color: map-get($codeHighlightPurple, 'light'); }
	}
}
@mixin darkPreset {
	body { background: map-get($bgColor, 'dark'); color: map-get($textColor, 'dark'); }
	a { color: map-get($linkColor, 'dark'); }
	header, footer { background: map-get($menuBackgroundColor, 'dark'); }
	nav a { color: map-get($textColor, 'dark'); }
	.editor-colors {
		.plainText, .xmlAttributeQuotes { color: map-get($codeHighlightBlack, 'dark'); }
		.htmlComment, .comment, .xmlDocComment, .xmlComment { color: map-get($codeHighlightGreen, 'dark'); }
		.htmlTagDelimiter, .htmlAttributeValue, .htmlOperator, .keyword, .preprocessorKeyword, .xmlAttributeValue, .xmlDelimiter, .cssPropertyValue, .controlKeyword { color: map-get($codeHighlightBlue, 'dark'); }
		.htmlElementName, .string, .stringCSharpVerbatim, .xmlName, .cssSelector { color: map-get($codeHighlightDullRed, 'dark'); }
		.htmlAttributeName, .htmlEntity, .xmlAttribute, .cssPropertyName { color: map-get($codeHighlightRed, 'dark'); }
		.xmlDocTag, .xmlCDataSection, .powershellOperator, .stringEscape { color: map-get($codeHighlightGray, 'dark'); }
		.className { color: map-get($codeHighlightMediumTurquoise, 'dark'); }
		.sqlSystemFunction { color: map-get($codeHighlightMagenta, 'dark'); }
		.powershellAttribute { color: map-get($codeHighlightPowderBlue, 'dark'); }
		.powershellType, .type, .markdownCode, .typeVariable { color: map-get($codeHighlightTeal, 'dark'); }
		.powershellVariable { color: map-get($codeHighlightOrangeRed, 'dark'); }
		.namespace, .predefined, .pseudoKeyword { color: map-get($codeHighlightNavy, 'dark'); }
		.constructor { color: map-get($codeHighlightPurple, 'dark'); }
	}
}
html { @include lightPreset; }
.dark { @include darkPreset; }
@media (prefers-color-scheme: dark) {
	html { @include darkPreset; }
	.light { @include lightPreset; }
}

@mixin themeMaps($values) {
	html & { @each $property, $value in $values { #{$property}: map-get($value, 'light'); } }
	.dark & { @each $property, $value in $values { #{$property}: map-get($value, 'dark'); } }
	@media (prefers-color-scheme: dark) {
		html & { @each $property, $value in $values { #{$property}: map-get($value, 'dark'); } }
		.light & { @each $property, $value in $values { #{$property}: map-get($value, 'light'); } }
	}
}
@mixin themeMap($property, $value) {
	html & { #{$property}: map-get($value, 'light'); }
	.dark & { #{$property}: map-get($value, 'dark'); }
	@media (prefers-color-scheme: dark) {
		html & { #{$property}: map-get($value, 'dark'); }
		.light & { #{$property}: map-get($value, 'light'); }
	}
}





header {
	flex: 0 0 auto;
	.workspaces {
		padding: 5px 0; text-align: center; border-bottom-width: 1px; border-bottom-style: solid; @include themeMap("border-bottom-color", $menuBorderColor);
		a { display: inline-block; font-size: 14px; font-weight: bolder; margin: 5px 5px 3px 5px; padding: 5px; text-decoration: none; }
		a span { display: block; padding-bottom: 2px; }
		a.selected span { padding-bottom: 0; border-bottom-width: 2px; border-bottom-style: solid; @include themeMap("border-bottom-color", $textColor); }
		@include aboveTablet { padding: 5px 15px; font-size: 18px; }
	}
	.pageTitle {
		@include padding;
		.user { font-size: 12px; padding: 0 0 5px 15px; float: right; position: relative; z-index: 2;
			.name { font-weight: bold; }
			.command { margin-left: 5px; @include themeMap("color", $textColorLight); a { color: inherit; } }
		}
		.breadcrumbs {
			margin: -5px; position: relative; z-index: 1; font-size: 12px; @include themeMap("color", $textColorLight);
			a { color: inherit; display: inline-block; padding: 5px; text-decoration: none; font-weight: 500; }
			.separator { display: inline-block; padding: 5px 0; }
			@include aboveTablet { font-size: 14px; }
		}
		h1 { font-size: 24px; font-weight: bolder; margin: 0;
			 @include aboveTablet { font-size: 30px; }
		}
	}
	@media only print
	{
		.workspaces { display: none !important; }
		.pageTitle { padding: 0 0 20px 0; }
		border-bottom: 1px solid; margin-bottom: 40px;
		@include themeMap("border-bottom-color", $textColor);
	}
}





footer { flex: 0 0 auto; }





.pageContent {
	@include padding;
	flex: 1 1 auto;
	@media only print { padding: 0; }
}

.pageContent, main, blockquote
{
	& > :first-child { margin-top: 0; }
	& > :last-child { margin-bottom: 0; }
}

.plainTextFile { white-space: pre-wrap; }



main
{


	blockquote {
		border-left: 4px solid; padding: 5px 5px 5px 15px; font-size: 18px; letter-spacing: -1px; font-style: italic;
		@include themeMaps(("border-left-color": $menuBorderColor, "background": $menuBackgroundColor));
	}


	pre, code {
		font-family: Consolas, Courier New, Courier, monospace; border: 1px solid; font-size: .9em;
		@include themeMaps(("border-color": $menuBorderColor, "background": $menuBackgroundColor));
	}
	pre { padding: 10px; overflow-x: auto; }
	code { padding: 0 2px; }
	pre > pre, code > code, pre > code, code > pre { font-size: 1em; border: none; padding: 0; margin: 0; }

	hr { margin: 30px 0; border-top: 2px solid; border-left: none; border-right: none; border-bottom: none; @include themeMap("border-top-color", $textColorLight); }


	table
	{
		margin-top: 15px; margin-bottom: 15px; text-align: left; border-collapse: collapse; border: 1px solid;
		tr:hover { @include themeMap("background", $menuBackgroundColor) }
		th, td { padding: 5px 10px; border: 1px solid; vertical-align: top; }
		th { border-bottom-width: 2px; }
	}
	table, table td, table th { @include themeMap("border-color", $menuBorderColor); }
	table th { @include themeMaps(("border-bottom-color": $textColorLight, "background": $menuBackgroundColor)); }


}


.editor-colors {
	.typeVariable, .italic { font-style: italic; }
	.markdownHeader, .markdownListItem, .bold { font-weight: bold; }
}






@import "auth.scss";
